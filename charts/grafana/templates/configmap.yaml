apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "grafana.name" . }}
    helm.sh/chart: {{ include "grafana.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
  name: {{ include "grafana.fullname" . }}
data:
  grafana.ini: |+
    ############################ Grafana Configuration ###########################
    # Generated by Helm, please modify through Helm.
    #################################### Paths ####################################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is useD)
    #
    data = {{ .Values.grafana.paths.data_dir }}
    #
    # Directory where grafana can store logs
    #
    logs = {{ .Values.grafana.paths.log_dir }}

    #################################### Server ####################################
    [server]
    # Protocol (http or https)
    protocol = {{ .Values.grafana.server.protocol }}

    # The ip address to bind to, empty will bind to all interfaces
    http_addr = {{ .Values.grafana.server.http_addr}}

    # The http port  to use
    http_port = {{ .Values.grafana.server.port }}

    # The public facing domain name used to access grafana from a browser
    domain = {{ .Values.grafana.server.domain }}

    # The full public facing url
    ;root_url = %(protocol)s://%(domain)s:%(http_port)s/

    # Log web requests
    router_logging = {{ .Values.grafana.server.log_requests }}

    # the path relative working path
    ;static_root_path = public

    # enable gzip
    enable_gzip = {{ .Values.grafana.server.enable_gzip }}

    # https certs & key file
    cert_file = {{ .Values.grafana.server.ssl_cert }}
    cert_key = {{ .Values.grafana.server.ssl_key }}

    #################################### Database ####################################
    [database]
    # Either "mysql", "postgres" or "sqlite3", it's your choice
    type = {{ .Values.grafana.database.type}}
    host = {{ .Values.grafana.database.host }}:{{ .Values.grafana.database.port }}
    name = {{ .Values.grafana.database.name }}
    user = {{ .Values.grafana.database.user }}
    password = {{ .Values.grafana.database.password }}

    #################################### Session ####################################
    [session]
    # Either "memory", "file", "redis", "mysql", default is "memory"
    provider = {{ .Values.grafana.session.session_type }}

    # Provider config options
    # memory: not have any config yet
    # file: session dir path, is relative to grafana data_path
    # redis: config like redis server addr, poolSize, password, e.g. `127.0.0.1:6379,100,grafana`
    # mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1)/database_name`
    provider_config = ''

    # Session cookie name
    ;cookie_name = grafana_sess

    # If you use session in https only, default is false
    ;cookie_secure = false

    # Session life time, default is 86400
    ;session_life_time = 86400

    #################################### Analytics ####################################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    ;reporting_enabled = true

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    #################################### Security ####################################
    [security]
    # default admin user, created on startup
    ;admin_user = admin

    # default admin password, can be changed before first start of grafana,  or in profile settings
    admin_password = {{ .Values.grafana.security.admin_password }}

    # used for signing
    ;secret_key = AAAABBBBBCCCC

    # Auto-login remember days
    login_remember_days = {{ .Values.grafana.security.login_remember_days }}
    ;cookie_username = grafana_user
    ;cookie_remember_name = grafana_remember

    #################################### Users ####################################
    [users]
    # disable user signup / registration
    allow_sign_up = false

    # Allow non admin users to create organizations
    allow_org_create = false

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Default role new users will be automatically assigned (if disabled above is set to true)
    ;auto_assign_org_role = Viewer

    #################################### Anonymous Auth ##########################
    [auth.anonymous]
    # enable anonymous access
    enabled = {{ .Values.grafana.auth.anonymous.enabled }}

    # specify organization name that should be used for unauthenticated users
    org_name = {{ .Values.grafana.auth.anonymous.org_name }}

    # specify role for unauthenticated users
    org_role = Viewer

    #################################### Github Auth ##########################
    [auth.github]
    ;enabled = false
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    # Uncomment bellow to only allow specific email domains
    ; allowed_domains = mycompany.com othercompany.com

    #################################### Google Auth ##########################
    [auth.google]
    ;enabled = false
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    # Uncomment bellow to only allow specific email domains
    ; allowed_domains = mycompany.com othercompany.com

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true

    #################################### Basic Auth ##########################
    [auth.basic]
    ;enabled = true

    #################################### Auth LDAP ##########################
    [auth.ldap]
    enabled = {{ .Values.grafana.auth.ldap.enabled }}
    config_file = {{ .Values.grafana.auth.ldap.conf }}

    #################################### SMTP / Emailing ##########################
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost

    [emails]
    ;welcome_email_on_sign_up = false

    #################################### Logging ##########################
    [log]
    # Either "console", "file", default is "console"
    # Use comma to separate multiple modes, e.g. "console, file"
    mode = file

    # Buffer length of channel, keep it as it is if you don't know what it is.
    ;buffer_len = 10000

    # Either "Trace", "Debug", "Info", "Warn", "Error", "Critical", default is "Trace"
    level = {{ .Values.grafana.logging.level }}

    # For "console" mode only
    [log.console]
    ;level =

    # For "file" mode only
    [log.file]
    level = {{ .Values.grafana.logging.level }}
    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_lines_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    #################################### AMPQ Event Publisher ##########################
    [event_publisher]
    ;enabled = false
    ;rabbitmq_url = amqp://localhost/
    ;exchange = grafana_events

    [dashboards.json]
    enabled = true
    path = {{ .Values.grafana.event_publisher.base_dashboards_folder }}

  ldap.toml: |+
    # Set to true to log user information returned from LDAP
    verbose_logging = {{ .Values.ldap.varbose }}

    [[servers]]
    # Ldap server host
    host = {{ .Values.ldap.host | quote }}
    # Default port is 389 or 636 if use_ssl = true
    port = {{ .Values.ldap.port }}
    # Set to true if ldap server supports TLS
    use_ssl = {{ .Values.ldap.ssl }}
    # set to true if you want to skip ssl cert validation
    ssl_skip_verify = false

    # Search user bind dn
    bind_dn = {{ .Values.ldap.bind_user | quote }}
    # Search user bind password
    bind_password = {{ .Values.ldap.user_passwd | quote}}

    # Search filter, for example "(cn=%s)" or "(sAMAccountName=%s)"
    search_filter = {{ .Values.ldap.search_filter | quote }}
    # An array of base dns to search through
    search_base_dns = [{{ .Values.ldap.base_dn | quote }}]

    ## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
    group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
    ## An array of the base DNs to search through for groups. Typically uses ou=groups
    group_search_base_dns = ["ou=Group,dc=outbrain,dc=com"]

    # Specify names of the ldap attributes your ldap uses
    [servers.attributes]
    name = "cn"
    surname = "sn"
    username = "uid"
    member_of = "cn"
    email =  "mail"

    # Map ldap groups to grafana org roles
    [[servers.group_mappings]]
    group_dn = "cn=opsvisibility,ou=Group,dc=outbrain,dc=com"
    org_role = "Admin"
    org_id = 1

    [[servers.group_mappings]]
    group_dn = "cn=opsvisibility,ou=Group,dc=outbrain,dc=com"
    org_role = "Admin"
    org_id = 2

    #[[servers.group_mappings]]
    #group_dn = "cn=ops,ou=Group,dc=outbrain,dc=com"
    #org_role = "Admin"
    # The Grafana organization database id, optional, if left out the default org (id 1) will be used
    # org_id = 1

    #[[servers.group_mappings]]
    #group_dn = "cn=RND,ou=Group,dc=outbrain,dc=com"
    #org_role = "Editor"

    [[servers.group_mappings]]
    # If you want to match all (or no ldap groups) then you can use wildcard
    group_dn = "*"
    org_role = "Editor"
    org_id = 1

    [[servers.group_mappings]]
    group_dn = "*"
    org_role = "Editor"
    org_id = 2
